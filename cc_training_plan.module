<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disable title form element.
 */
function cc_training_plan_form_node_cc_training_plan_form_alter(&$form, FormStateInterface &$form_state, $form_id) {

  // Disable the title field.
  $form['title']['#disabled'] = 'disabled';

  // Set a default title, so that the node can be saved, this will be changed
  // when the node is saved to use start and end dates.
  $form['title']['widget'][0]['value']['#default_value'] = 'Training Plan';
}

/**
 * Implements hook_entity_presave().
 */
function cc_training_plan_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {

  // If we are on a routine orders, set the title.
  if ($entity->bundle() == 'cc_training_plan') {

    // The start date for the ROs, changing format.
    $date = date('M j, Y', strtotime($entity->get('field_cc_tp_training_date')->value));

    // Set the title based on the start and end dates.
    $entity->setTitle('Training Plan for ' . $date);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disable title form element.
 */
function cc_training_plan_form_node_cc_training_plan_edit_form_alter(&$form, FormStateInterface &$form_state, $form_id) {

  // Disable the title field.
  $form['title']['#disabled'] = 'disabled';
}

/**
 * Implements hook_views_query_alter().
 *
 * Set upcoming training plan to between parade nights.
 */
function cc_training_plan_views_query_alter(Drupal\views\ViewExecutable $view, Drupal\views\Plugin\views\query\Sql $query) {

  // If on the upcoming training plan view, process it.
  if ($view->id() == 'cc_view_training_plan_upcoming' && $view->getDisplay()->display['id'] == 'training_plan_upcoming') {

    // Get the site settings config.
    $config = \Drupal::config('cc_site_controller.sitesettings');

    // If the parade night is set, add condition to view.
    if ($config->get('parade_night') !== NULL) {

      // Start and end dates for between condition.
      $start = date('Y-m-dT00:00:00', strtotime('-1 ' . $config->get('parade_night')));
      $end = date('Y-m-dT00:00:00', strtotime('+1 ' . $config->get('parade_night')));
    }

    // The actual condition.
    $condition = "DATE_FORMAT(node__field_cc_tp_training_date.field_cc_tp_training_date_value, '%Y-%m-%d') BETWEEN DATE_FORMAT('" . $start . "', '%Y-%m-%d') AND DATE_FORMAT('" . $end . "', '%Y-%m-%d')";

    // Add the where clause.
    $query->addWhere('', $condition, array(), 'formula');
  }
}

/**
 * Implements hook_ENTITY_TYPE_update() for node entities.
 *
 * Sends emails to users when changed to published.
 */
function cc_training_plan_node_insert(NodeInterface $node) {

  if ($node->type->getValue()[0]['target_id'] == 'cc_training_plan') {

    $params['type'] = 'training';

    _cc_site_controller_send_emails('training_created', $params);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update() for node entities.
 *
 * Sends emails to users when changed to published.
 */
function cc_training_plan_node_update(NodeInterface $node) {

  // If we are on a news, process it.
  if ($node->type->getValue()[0]['target_id'] == 'cc_training_plan') {

    // The updated nodes status.
    $node_status = $node->status->getValue()[0]['value'];

    if (isset($node->original->status->getValue()[0]['value']) && $node->original->status->getValue()[0]['value'] !== NULL) {
      $original_node_status = $node->original->status->getValue()[0]['value'];
    }
    else {
      $original_node_status = 0;
    }

    // If we are changing to a published node, send emails.
    if (!$original_node_status && $node_status) {

      $params['type'] = 'training';

      _cc_site_controller_send_emails('training_created', $params);
    }
  }
}
